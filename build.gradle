import kotlinx.kover.gradle.plugin.dsl.AggregationType
import kotlinx.kover.gradle.plugin.dsl.GroupingEntityType
import kotlinx.kover.gradle.plugin.dsl.MetricType
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.springframework.boot' version '3.0.3'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.jetbrains.kotlin.jvm' version '1.7.22'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.7.22'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.7.22'
    id "io.gitlab.arturbosch.detekt" version "1.22.0"
    id "org.jetbrains.kotlinx.kover" version "0.7.0-Alpha"
}

group = 'ru.dmkuranov'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.liquibase:liquibase-core'
    implementation 'io.github.microutils:kotlin-logging-jvm:3.0.5'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.cache2k:cache2k-spring:2.6.1.Final'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.assertj:assertj-core:3.24.2'
}

tasks.withType(KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '17'
    }
    dependsOn(tasks.detekt)
}

tasks.named('test') {
    useJUnitPlatform()

    testLogging {
        events TestLogEvent.FAILED, TestLogEvent.PASSED, TestLogEvent.SKIPPED
        exceptionFormat TestExceptionFormat.FULL
        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams false
    }
}

detekt {
    allRules = true
    buildUponDefaultConfig = true
    config = files("detekt.yaml")
}

kover {
    disabledForProject = false
    useKoverTool()
}

koverReport {
    filters {
        excludes {
            classes(
                    "*\$log\$*",
                    "*.TemporalTestsApplication*"
            )
            annotatedBy(
                    "jakarta.persistence.Entity",
                    "jakarta.persistence.MappedSuperclass"
            )
        }
    }

    html {
        onCheck = true
        setReportDir(layout.buildDirectory.dir("coverage-html-result"))

    }

    verify {
        onCheck = true
        rule {
            entity = GroupingEntityType.APPLICATION

            bound {
                minValue = 95
                metric = MetricType.LINE
                aggregation = AggregationType.COVERED_PERCENTAGE
            }
        }

        rule {
            entity = GroupingEntityType.APPLICATION

            bound {
                minValue = 95
                metric = MetricType.BRANCH
                aggregation = AggregationType.COVERED_PERCENTAGE
            }
        }
    }
}
